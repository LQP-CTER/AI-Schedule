# -*- coding: utf-8 -*-
import streamlit as st
import pandas as pd
import io # Required for reading string data as file
import google.generativeai as genai
import yaml
from datetime import datetime, timedelta
# from config import GOOGLE_API_KEY # <<< REMOVED IMPORT
import re
import json
import sys # Required for checking xlsxwriter
import numpy as np # Needed for date calculations

# ------------------------------------------------------------------------------
# Page Configuration (Set Title and Icon)
st.set_page_config(page_title="AI Schedule Manager", page_icon="üìÖ", layout="wide")

# Check for xlsxwriter (optional but good for Excel export)
try:
    import xlsxwriter
except ImportError:
    st.warning("Module 'xlsxwriter' is recommended for Excel export. Install using: pip install xlsxwriter")

# --- UPDATED: Check and configure Google API Key using Streamlit Secrets ---
GOOGLE_API_KEY = st.secrets.get("GOOGLE_API_KEY")

if not GOOGLE_API_KEY:
    st.error("L·ªói: Google API Key ch∆∞a ƒë∆∞·ª£c c·∫•u h√¨nh trong Streamlit Secrets!")
    st.info("Vui l√≤ng th√™m GOOGLE_API_KEY v√†o m·ª•c Secrets trong c√†i ƒë·∫∑t ·ª©ng d·ª•ng c·ªßa b·∫°n tr√™n Streamlit Community Cloud.")
    st.stop() # Stop execution if no API key

# Configure Google Generative AI
try:
    genai.configure(api_key=GOOGLE_API_KEY)
except Exception as e:
     st.error(f"L·ªói c·∫•u h√¨nh Google API: {e}"); st.stop()

# Generation config for Google Generative AI
generation_config = { "temperature": 0.7, "top_p": 1, "top_k": 1, "max_output_tokens": 4096 }

# Initialize the Generative Model
try:
    model = genai.GenerativeModel(model_name="gemini-1.5-pro", generation_config=generation_config)
except Exception as e:
    st.error(f"L·ªói kh·ªüi t·∫°o m√¥ h√¨nh AI: {e}"); st.error("Ki·ªÉm tra API Key v√† k·∫øt n·ªëi m·∫°ng."); st.stop()

# --- Define Predefined Column Names ---
PREDEFINED_COLUMNS = [
    "T√™n nh√¢n vi√™n:",
    "ƒêƒÉng k√≠ ca cho tu·∫ßn:",
    "b·∫°n c√≥ th·ªÉ l√†m vi·ªác th·ªùi gian n√†o? [Th·ª© 2]",
    "b·∫°n c√≥ th·ªÉ l√†m vi·ªác th·ªùi gian n√†o? [Th·ª© 3]",
    "b·∫°n c√≥ th·ªÉ l√†m vi·ªác th·ªùi gian n√†o? [Th·ª© 4]",
    "b·∫°n c√≥ th·ªÉ l√†m vi·ªác th·ªùi gian n√†o? [Th·ª© 5]",
    "b·∫°n c√≥ th·ªÉ l√†m vi·ªác th·ªùi gian n√†o? [Th·ª© 6]",
    "b·∫°n c√≥ th·ªÉ l√†m vi·ªác th·ªùi gian n√†o? [Th·ª© 7]",
    "b·∫°n c√≥ th·ªÉ l√†m vi·ªác th·ªùi gian n√†o? [Ch·ªß nh·∫≠t]",
    "Ghi ch√∫ (n·∫øu c√≥)"
]

# --- Custom CSS for Styling (Keep as is) ---
def load_css():
    """Loads custom CSS styles."""
    # CSS content kept the same as previous version
    st.markdown("""
        <style>
            /* General Body and Font */
            body { font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; }
            /* Main Container */
            .main .block-container { padding-top: 2rem; padding-bottom: 5rem; padding-left: 2rem; padding-right: 2rem; } /* Reduced padding */
            /* Titles */
            h1, h2 { color: #2c3e50; border-bottom: 2px solid #3498db; padding-bottom: 5px; margin-bottom: 20px;}
            h3 { color: #34495e; margin-top: 25px; margin-bottom: 15px; }
            body:has([data-theme="dark"]) h1, body:has([data-theme="dark"]) h2, body:has([data-theme="dark"]) h3 { color: #ecf0f1; border-bottom-color: #5dade2;}
            body:has([data-theme="dark"]) h3 { color: #bdc3c7;}

            /* Buttons */
            .stButton>button { border-radius: 8px; padding: 10px 15px; font-weight: 600; border: none; color: white; background-color: #3498db; transition: background-color 0.3s ease; margin-top: 5px; margin-bottom: 5px;} /* Slightly less padding */
            .stButton>button:hover { background-color: #2980b9; }
            .stButton>button:active { background-color: #2471a3; }
            .stButton[key*="generate_ai_button"]>button { background-color: #2ecc71; }
            .stButton[key*="generate_ai_button"]>button:hover { background-color: #27ae60; }
            /* Button for copy text */
             .stButton[key*="generate_copy_text_button"]>button { background-color: #9b59b6; /* Purple */ }
             .stButton[key*="generate_copy_text_button"]>button:hover { background-color: #8e44ad; /* Darker Purple */ }


            /* Text Area */
            .stTextArea textarea { border-radius: 8px; border: 1px solid #bdc3c7; padding: 10px; min-height: 150px; font-family: monospace; /* Use monospace for better alignment */}
            body:has([data-theme="dark"]) .stTextArea textarea { border: 1px solid #566573; }
            .stTextArea label { font-weight: 600; color: #34495e; margin-bottom: 5px; display: block;}
            body:has([data-theme="dark"]) .stTextArea label { color: #bdc3c7; }

            /* DataFrames / Data Editor / Manual Table */
            .stDataFrame, .stDataEditor, .manual-table-header, .manual-table-row { border-radius: 8px; overflow: visible; margin-bottom: 10px;} /* Reduced margin */
            .manual-table-header > div { font-weight: bold; background-color: #eaf2f8; padding: 8px 6px; text-align: center; border: 1px solid #d6eaf8; font-size: 0.9rem;} /* Smaller padding/font */
            body:has([data-theme="dark"]) .manual-table-header > div { background-color: #34495e; border: 1px solid #4e6070; }
            .manual-table-row > div { padding: 4px 6px; border: 1px solid #e8ecf1; min-height: 55px; display: flex; align-items: center; justify-content: center;} /* Reduced padding */
            body:has([data-theme="dark"]) .manual-table-row > div { border: 1px solid #4a4f5a; }
            /* Alternating row colors for manual table */
            .manual-table-row:nth-child(even) > div { background-color: #f8f9fa; }
            body:has([data-theme="dark"]) .manual-table-row:nth-child(even) > div { background-color: #2c3e50; }


            /* Selectbox in manual table */
            .manual-table-row .stSelectbox { width: 100%; overflow: visible !important; }
            .manual-table-row .stSelectbox div[data-baseweb="select"] { font-size: 0.85rem; width: 100%; background-color: var(--background-color); }
            .manual-table-row .stSelectbox div[data-baseweb="select"] > div:first-child { color: var(--text-color) !important; overflow: visible !important; }
            .manual-table-row .stSelectbox div[data-baseweb="select"] > div:first-child > div { white-space: normal !important; overflow: visible !important; text-overflow: clip !important; max-width: none !important; }


            /* Sidebar */
             .stSidebar .stNumberInput input, .stSidebar .stSlider, .stSidebar .stCheckbox { margin-bottom: 10px; }
             .stSidebar h3 { color: #3498db; margin-top: 15px;}
             body:has([data-theme="dark"]) .stSidebar h3 { color: #5dade2; }
             .stSidebar .stMarkdown p { font-size: 0.95rem; line-height: 1.4;}
             .stSidebar .stDivider { margin-top: 15px; margin-bottom: 15px;}

            /* --- UPDATED: Footer style for sidebar --- */
            .footer-copyright {
                /* position: fixed; right: 15px; bottom: 10px; /* REMOVED fixed positioning */
                color: #7f8c8d; /* Lighter gray color */
                font-size: 12px; /* Smaller font */
                text-align: center; /* Center align in sidebar */
                padding-top: 20px; /* Add some space above */
                /* z-index: 9999; /* Not needed without fixed */
            }
             body:has([data-theme="dark"]) .footer-copyright {
                  color: #95a5a6; /* Adjust color for dark theme */
             }

            /* Login Box Specific Styles */
            .login-box { margin: 50px auto 0 auto; max-width: 380px; background-color: rgba(255, 255, 255, 0.9); backdrop-filter: blur(5px); padding: 35px; border-radius: 10px; box-shadow: 0 4px 8px rgba(0,0,0,0.15); text-align: center; }
            .login-title { font-size: 24px; font-weight: 600; color: #31333F; margin-bottom: 25px; border-bottom: none; }
            .login-box .stTextInput>div>div>input { padding: 12px; border: 1px solid #ccc; border-radius: 5px; width: 100%; margin-bottom: 15px;}
            .login-box .stButton>button { width: 100%; height: 48px; background-color: #31333F; color: #FFFFFF; border: none; border-radius: 5px; font-size: 16px; font-weight: 600; cursor: pointer; margin-top: 15px; }
            .login-box .stButton>button:hover { background-color: #50525C; }
            .login-page-background { background: linear-gradient(to right, #74ebd5, #ACB6E5); min-height: 100vh; width: 100%; display: flex; align-items: center; justify-content: center; position: absolute; top: 0; left: 0; z-index: -1; }

            /* Container styling */
            div[data-testid="stVerticalBlock"]:has(> div > div > div.stContainer) { }
             body:has([data-theme="dark"]) div[data-testid="stVerticalBlock"]:has(> div > div > div.stContainer) { }

        </style>
    """, unsafe_allow_html=True)


# --- Credential Loading and Login Logic ---
def load_credentials():
    """Loads credentials from Streamlit secrets or local file."""
    credentials_dict = st.secrets.get("credentials", {})
    if not credentials_dict:
         st.warning("Kh√¥ng t√¨m th·∫•y credentials trong Secrets. Th·ª≠ ƒë·ªçc file credentials.yaml...")
         try:
             with open('credentials.yaml') as file:
                 credentials_dict = yaml.safe_load(file) or {}
         except FileNotFoundError: st.error("File credentials.yaml kh√¥ng t·ªìn t·∫°i."); return {}
         except yaml.YAMLError as e: st.error(f"L·ªói ƒë·ªçc credentials.yaml: {e}"); return {}
    return credentials_dict

def login():
    """Handles the login interface and logic."""
    if 'logged_in' not in st.session_state: st.session_state.logged_in = False
    st.markdown('<div class="login-page-background"></div>', unsafe_allow_html=True)
    col1, col2, col3 = st.columns([1,1.5,1])
    with col2:
        st.markdown("<div class='login-box'>", unsafe_allow_html=True)
        st.markdown("<h2 class='login-title'>AI Schedule Manager</h2>", unsafe_allow_html=True)
        st.markdown("<p style='color: #566573; margin-top: -15px; margin-bottom: 30px;'>Vui l√≤ng ƒëƒÉng nh·∫≠p</p>", unsafe_allow_html=True)
        credentials = load_credentials();
        if not credentials: st.markdown("</div>", unsafe_allow_html=True); return False
        username = st.text_input("T√™n ƒëƒÉng nh·∫≠p", key="login_user").strip()
        password = st.text_input("M·∫≠t kh·∫©u", type="password", key="login_pass")
        if st.button("ƒêƒÉng nh·∫≠p", key="login_button_main", use_container_width=True):
            if username in credentials and credentials[username] == password:
                st.session_state.logged_in = True; st.success("ƒêƒÉng nh·∫≠p th√†nh c√¥ng!"); st.rerun()
            else: st.error("T√™n ƒëƒÉng nh·∫≠p ho·∫∑c m·∫≠t kh·∫©u kh√¥ng ƒë√∫ng.")
        st.markdown("</div>", unsafe_allow_html=True)
    return st.session_state.logged_in


# --- Scheduling Requirements Input ---
def get_scheduling_requirements():
    """Gets scheduling constraints from the sidebar."""
    st.sidebar.header("‚öôÔ∏è ƒêi·ªÅu Ki·ªán L·∫≠p L·ªãch")
    st.sidebar.divider()
    requirements = {
        "shifts_definition": {"Ca 1": {"start": "09:00", "end": "15:00"}, "Ca 2": {"start": "14:00", "end": "20:00"}},
        "max_shifts_per_day": 1,
        "shifts_per_week_target": 4,
        "min_rest_hours": st.sidebar.number_input("Gi·ªù ngh·ªâ t·ªëi thi·ªÉu (>1 ca/ng√†y)", min_value=1, value=8, step=1),
        "max_consecutive_days": st.sidebar.number_input("Ng√†y l√†m li√™n ti·∫øp t·ªëi ƒëa", min_value=1, max_value=7, value=6, step=1),
        "preferences_weight_hint": st.sidebar.slider("∆Øu ti√™n nguy·ªán v·ªçng ghi ch√∫", 0.0, 1.0, 0.7, 0.1)
    }
    st.sidebar.divider(); st.sidebar.markdown("**‚ÑπÔ∏è Quy t·∫Øc:**")
    st.sidebar.markdown(f"- **Ca 1:** {requirements['shifts_definition']['Ca 1']['start']} - {requirements['shifts_definition']['Ca 1']['end']}")
    st.sidebar.markdown(f"- **Ca 2:** {requirements['shifts_definition']['Ca 2']['start']} - {requirements['shifts_definition']['Ca 2']['end']}")
    st.sidebar.markdown(f"- **S·ªë ng∆∞·ªùi/ca:** **2** (ng√†y th∆∞·ªùng), **3** (ng√†y tr√πng th√°ng VD: 3/3, 5/5...)")
    st.sidebar.markdown(f"- **T·ªëi ƒëa:** **{requirements['max_shifts_per_day']}** ca/ng∆∞·ªùi/ng√†y")
    st.sidebar.markdown(f"- **T·ªïng s·ªë ca/tu·∫ßn:** **{requirements['shifts_per_week_target']}** ca/ng∆∞·ªùi")
    st.sidebar.divider()
    if not requirements["min_rest_hours"] > 0 or not requirements["max_consecutive_days"] > 0:
        st.sidebar.error("Gi·ªù ngh·ªâ v√† ng√†y l√†m li√™n ti·∫øp ph·∫£i l·ªõn h∆°n 0."); return None
    return requirements


# --- Helper Function to Find Start Date (Keep updated date parsing) ---
def find_start_date(df_input):
    """Finds the start date (Monday) from the input DataFrame."""
    week_start_col = next((col for col in df_input.columns if 'tu·∫ßn' in col.lower() or 'week' in col.lower()), None)
    start_date = None
    if week_start_col and not df_input[week_start_col].empty:
        date_val_str = str(df_input[week_start_col].dropna().iloc[0]) # Get value as string
        try:
            start_date = pd.to_datetime(date_val_str, dayfirst=True, errors='coerce') # Try DD/MM/YYYY first
            if pd.isna(start_date): start_date = pd.to_datetime(date_val_str, errors='coerce')
            if pd.notna(start_date): start_date = start_date - timedelta(days=start_date.weekday())
        except Exception as e:
             st.warning(f"L·ªói ph√¢n t√≠ch ng√†y th√°ng t·ª´ c·ªôt '{week_start_col}': {e}. Gi√° tr·ªã: '{date_val_str}'"); pass
    return start_date

# --- RE-ADD: Preprocess Pasted Data for Availability Lookup ---
def preprocess_pasted_data_for_lookup(df_input):
    """Processes the raw pasted DataFrame to create a structured availability lookup table."""
    st.info("‚öôÔ∏è ƒêang x·ª≠ l√Ω d·ªØ li·ªáu ƒëƒÉng k√Ω g·ªëc ƒë·ªÉ tra c·ª©u...")
    processed_rows = []
    start_date = find_start_date(df_input)
    if start_date is None:
        st.warning("‚ö†Ô∏è Kh√¥ng x√°c ƒë·ªãnh ƒë∆∞·ª£c ng√†y b·∫Øt ƒë·∫ßu tu·∫ßn. Ch·ª©c nƒÉng t√¨m thay th·∫ø s·∫Ω kh√¥ng ho·∫°t ƒë·ªông.")
        return pd.DataFrame(columns=['Date', 'Employee', 'Shift', 'Can_Work', 'Note']) # Return empty DF

    employee_col = next((col for col in df_input.columns if 't√™n' in col.lower()), None)
    note_col = next((col for col in df_input.columns if 'ghi ch√∫' in col.lower()), None)
    day_mapping = {}; day_keywords_map = {
        0: ['th·ª© 2', 'mon'], 1: ['th·ª© 3', 'tue'], 2: ['th·ª© 4', 'wed'], 3: ['th·ª© 5', 'thu'],
        4: ['th·ª© 6', 'fri'], 5: ['th·ª© 7', 'sat'], 6: ['ch·ªß nh·∫≠t', 'sun']
    }
    found_day_cols = False
    for day_index, keywords in day_keywords_map.items():
        for col in df_input.columns:
            # --- More specific check for day columns ---
            col_lower = str(col).lower()
            if any(f'[{keyword}]' in col_lower for keyword in keywords) or any(f' {keyword}' in col_lower for keyword in keywords):
                 day_mapping[day_index] = col; found_day_cols = True; break
    if not found_day_cols: st.error("‚ùå Kh√¥ng t√¨m th·∫•y c√°c c·ªôt ng√†y (VD: '... [Th·ª© 2]')."); return None
    if not employee_col: st.error("‚ùå Kh√¥ng t√¨m th·∫•y c·ªôt t√™n nh√¢n vi√™n."); return None

    for index, row in df_input.iterrows():
        employee = row.get(employee_col); note = row.get(note_col, '') if note_col else ''
        if not employee or pd.isna(employee): continue
        for day_index, day_col in day_mapping.items():
            current_date = start_date + timedelta(days=day_index)
            availability_text = str(row.get(day_col, '')).lower()
            can_do_ca1 = False; can_do_ca2 = False
            if 'ngh·ªâ' in availability_text or 'off' in availability_text: pass # Both remain False
            else:
                if 'ca 1' in availability_text or 's√°ng' in availability_text or '9h' in availability_text: can_do_ca1 = True
                if 'ca 2' in availability_text or 'chi·ªÅu' in availability_text or '14h' in availability_text: can_do_ca2 = True
                # If text exists but doesn't specify shift, assume both possible unless explicitly 'nghi'
                if not can_do_ca1 and not can_do_ca2 and availability_text.strip() != '':
                     can_do_ca1 = True; can_do_ca2 = True
            processed_rows.append({'Date': current_date.date(), 'Employee': employee.strip(), 'Shift': 'Ca 1', 'Can_Work': can_do_ca1, 'Note': note})
            processed_rows.append({'Date': current_date.date(), 'Employee': employee.strip(), 'Shift': 'Ca 2', 'Can_Work': can_do_ca2, 'Note': note})
    if not processed_rows: st.warning("‚ö†Ô∏è Kh√¥ng c√≥ d·ªØ li·ªáu ƒëƒÉng k√Ω h·ª£p l·ªá."); return pd.DataFrame(columns=['Date', 'Employee', 'Shift', 'Can_Work', 'Note'])
    lookup_df = pd.DataFrame(processed_rows)
    lookup_df['Date'] = pd.to_datetime(lookup_df['Date']).dt.date # Ensure Date is date object
    st.success("‚úÖ ƒê√£ x·ª≠ l√Ω xong d·ªØ li·ªáu ƒëƒÉng k√Ω g·ªëc."); return lookup_df


# --- AI Schedule Generation Function (Keep dynamic staffing logic and 4 shifts/week rule) ---
def generate_schedule_with_ai(df_input, requirements, model):
    """Constructs a prompt and calls the AI model to generate the schedule."""
    # This function remains the same as the previous version (v10)
    st.info(" Chu·∫©n b·ªã d·ªØ li·ªáu v√† t·∫°o prompt cho AI...")
    data_prompt_list = []; data_prompt_list.append("D·ªØ li·ªáu ƒëƒÉng k√Ω c·ªßa nh√¢n vi√™n:")
    employee_col = next((col for col in df_input.columns if 't√™n' in col.lower()), None)
    note_col = next((col for col in df_input.columns if 'ghi ch√∫' in col.lower()), None)
    day_keywords = ['th·ª© 2', 'th·ª© 3', 'th·ª© 4', 'th·ª© 5', 'th·ª© 6', 'th·ª© 7', 'ch·ªß nh·∫≠t', 'mon', 'tue', 'wed', 'thu', 'fri', 'sat', 'sun']
    day_cols = [col for col in df_input.columns if any(keyword in str(col).lower() for keyword in day_keywords)]
    start_date = find_start_date(df_input); start_date_str_for_prompt = start_date.strftime('%Y-%m-%d') if start_date else "Kh√¥ng x√°c ƒë·ªãnh"
    if not employee_col: st.error("L·ªói: Kh√¥ng th·ªÉ x√°c ƒë·ªãnh c·ªôt 'T√™n nh√¢n vi√™n'."); return None
    if not day_cols: st.warning("Kh√¥ng t√¨m th·∫•y c·ªôt ng√†y (Th·ª© 2-CN).")
    if start_date is None: st.warning("Kh√¥ng x√°c ƒë·ªãnh ƒë∆∞·ª£c ng√†y b·∫Øt ƒë·∫ßu tu·∫ßn.")

    data_prompt_list.append(f"(D·ªØ li·ªáu cho tu·∫ßn b·∫Øt ƒë·∫ßu Th·ª© 2 kho·∫£ng: {start_date_str_for_prompt})")
    for index, row in df_input.iterrows(): # Format data for prompt
        emp_name = row[employee_col]; data_prompt_list.append(f"Nh√¢n vi√™n: {emp_name}")
        availability_info = []
        if day_cols:
            for day_col in day_cols:
                 cell_value = row.get(day_col)
                 if pd.notna(cell_value): availability_info.append(f"- {day_col}: {cell_value}")
                 else: availability_info.append(f"- {day_col}: (Tr·ªëng)")
        else: availability_info.append(f"  (Th√¥ng tin chi ti·∫øt: {row.to_dict()})")
        data_prompt_list.extend(availability_info)
        if note_col and pd.notna(row.get(note_col)): data_prompt_list.append(f"- Ghi ch√∫: {row[note_col]}")
        else: data_prompt_list.append(f"- Ghi ch√∫: Kh√¥ng c√≥")
        data_prompt_list.append("---")
    data_prompt = "\n".join(data_prompt_list)

    daily_staffing_prompt = "- **Y√™u c·∫ßu s·ªë l∆∞·ª£ng nh√¢n vi√™n (Part-time) m·ªói ca:**\n"
    if start_date:
        for i in range(7):
            current_day = start_date + timedelta(days=i)
            staff_count = 3 if current_day.day == current_day.month else 2
            day_name = ["Th·ª© 2", "Th·ª© 3", "Th·ª© 4", "Th·ª© 5", "Th·ª© 6", "Th·ª© 7", "Ch·ªß Nh·∫≠t"][i]
            daily_staffing_prompt += f"  + Ng√†y {current_day.strftime('%Y-%m-%d')} ({day_name}): **{staff_count} ng∆∞·ªùi/ca** (Ca 1 v√† Ca 2).\n"
    else: daily_staffing_prompt += "  + **2 ng∆∞·ªùi/ca** cho t·∫•t c·∫£ c√°c ng√†y.\n"

    req_prompt_list = [] # Format requirements for prompt
    req_prompt_list.append("\nR√†ng bu·ªôc v√† Quy t·∫Øc x·∫øp l·ªãch:")
    req_prompt_list.append(f"- Ca l√†m vi·ªác: Ca 1 ({requirements['shifts_definition']['Ca 1']['start']} - {requirements['shifts_definition']['Ca 1']['end']}), Ca 2 ({requirements['shifts_definition']['Ca 2']['start']} - {requirements['shifts_definition']['Ca 2']['end']}).")
    req_prompt_list.append(f"- M·ªói nh√¢n vi√™n l√†m t·ªëi ƒëa {requirements['max_shifts_per_day']} ca/ng√†y.")
    req_prompt_list.append(f"- **QUAN TR·ªåNG (C√¥ng b·∫±ng):** M·ªói nh√¢n vi√™n ph·∫£i ƒë∆∞·ª£c x·∫øp l·ªãch l√†m vi·ªác **ƒê√öNG {requirements['shifts_per_week_target']} ca** trong c·∫£ tu·∫ßn.")
    req_prompt_list.append(f"- √çt nh·∫•t {requirements['min_rest_hours']} gi·ªù ngh·ªâ gi·ªØa c√°c ca (n·∫øu c√≥ th·ªÉ >1 ca/ng√†y).")
    req_prompt_list.append(f"- T·ªëi ƒëa {requirements['max_consecutive_days']} ng√†y l√†m vi·ªác li√™n ti·∫øp.")
    req_prompt_list.append(daily_staffing_prompt) # Add dynamic daily staffing
    # --- UPDATED: Refined note handling instructions ---
    req_prompt_list.append(f"- X·ª≠ l√Ω 'Ghi ch√∫' c·ªßa nh√¢n vi√™n:")
    req_prompt_list.append(f"  + **∆Øu ti√™n 1 (B·∫Øt bu·ªôc):** Ghi ch√∫ 'ngh·ªâ', 'b·∫≠n', 'kh√¥ng th·ªÉ', 'xin off' -> TUY·ªÜT ƒê·ªêI KH√îNG x·∫øp l·ªãch.")
    req_prompt_list.append(f"  + **∆Øu ti√™n 2 (Mong mu·ªën):** Ghi ch√∫ 'mu·ªën l√†m', '∆∞u ti√™n', 'c√≥ th·ªÉ l√†m' -> C·ªê G·∫ÆNG x·∫øp n·∫øu kh√¥ng vi ph·∫°m r√†ng bu·ªôc kh√°c (m·ª©c ƒë·ªô ∆∞u ti√™n g·ª£i √Ω: {requirements['preferences_weight_hint']}).")
    req_prompt_list.append(f"  + **∆Øu ti√™n 3 (Gi·ªù l√†m kh√¥ng tr·ªçn v·∫πn):** N·∫øu ghi ch√∫ c√≥ gi·ªù c·ª• th·ªÉ (VD: 'ch·ªâ l√†m 9h-12h', 'l√†m t·ª´ 16h'), h√£y l√†m theo c√°c b∆∞·ªõc sau:")
    req_prompt_list.append(f"      1. ∆Øu ti√™n x·∫øp ƒë·ªß s·ªë ng∆∞·ªùi c√≥ th·ªÉ l√†m **tr·ªçn v·∫πn** ca ƒë√≥ tr∆∞·ªõc.")
    req_prompt_list.append(f"      2. **CH·ªà KHI** ca ƒë√≥ v·∫´n c√≤n thi·∫øu ng∆∞·ªùi theo y√™u c·∫ßu s·ªë l∆∞·ª£ng, th√¨ M·ªöI xem x√©t x·∫øp nh√¢n vi√™n c√≥ gi·ªù l√†m kh√¥ng tr·ªçn v·∫πn v√†o ƒë·ªÉ ƒë√°p ·ª©ng nguy·ªán v·ªçng c·ªßa h·ªç (d√π h·ªç kh√¥ng l√†m ƒë·ªß gi·ªù).")
    req_prompt_list.append(f"      3. N·∫øu ca ƒë√£ ƒë·ªß ng∆∞·ªùi l√†m tr·ªçn v·∫πn, th√¨ KH√îNG x·∫øp th√™m ng∆∞·ªùi ch·ªâ l√†m ƒë∆∞·ª£c m·ªôt ph·∫ßn gi·ªù.")
    req_prompt_list.append("- Ch·ªâ x·∫øp l·ªãch v√†o ca nh√¢n vi√™n ƒëƒÉng k√Ω/c√≥ th·ªÉ l√†m.")
    req_prompt_list.append("- B·ªè qua nh√¢n vi√™n 'FM/Sup'.")
    req_prompt = "\n".join(req_prompt_list)

    full_prompt = f"""
B·∫°n l√† m·ªôt tr·ª£ l√Ω qu·∫£n l√Ω l·ªãch l√†m vi·ªác si√™u h·∫°ng. D·ª±a v√†o d·ªØ li·ªáu ƒëƒÉng k√Ω c·ªßa nh√¢n vi√™n (ch·ªß y·∫øu l√† Part-time) v√† c√°c quy t·∫Øc r√†ng bu·ªôc d∆∞·ªõi ƒë√¢y, h√£y t·∫°o ra m·ªôt l·ªãch l√†m vi·ªác t·ªëi ∆∞u cho tu·∫ßn, **b·∫Øt ƒë·∫ßu t·ª´ ng√†y Th·ª© Hai l√† {start_date_str_for_prompt} (YYYY-MM-DD)**.

{data_prompt}

{req_prompt}

**Y√™u c·∫ßu ƒë·∫ßu ra:**
H√£y tr√¨nh b√†y l·ªãch l√†m vi·ªác d∆∞·ªõi d·∫°ng m·ªôt b·∫£ng MARKDOWN r√µ r√†ng.
**C·ªôt ƒë·∫ßu ti√™n PH·∫¢I l√† "Ng√†y" v√† ch·ª©a ng√†y th√°ng c·ª• th·ªÉ (theo ƒë·ªãnh d·∫°ng<y_bin_46>-MM-DD)** cho t·ª´ng ng√†y trong tu·∫ßn (Th·ª© 2 ƒë·∫øn Ch·ªß Nh·∫≠t), t√≠nh to√°n d·ª±a tr√™n ng√†y b·∫Øt ƒë·∫ßu tu·∫ßn ƒë√£ cho ({start_date_str_for_prompt}).
C√°c c·ªôt ti·∫øp theo l√† "Ca" v√† "Nh√¢n vi√™n ƒë∆∞·ª£c ph√¢n c√¥ng". S·∫Øp x·∫øp theo ng√†y. **Trong c·ªôt "Nh√¢n vi√™n ƒë∆∞·ª£c ph√¢n c√¥ng", li·ªát k√™ T·∫§T C·∫¢ t√™n nh√¢n vi√™n ƒë∆∞·ª£c x·∫øp v√†o ca ƒë√≥, c√°ch nhau b·∫±ng d·∫•u ph·∫©y.**

V√≠ d·ª• ƒë·ªãnh d·∫°ng b·∫£ng MARKDOWN mong mu·ªën (v·ªõi ng√†y b·∫Øt ƒë·∫ßu l√† 2025-05-05, l√† ng√†y Double Day):

| Ng√†y       | Ca    | Nh√¢n vi√™n ƒë∆∞·ª£c ph√¢n c√¥ng |
|------------|-------|--------------------------|
| 2025-05-05 | Ca 1  | NV A, NV B, NV X         | <--- 3 ng∆∞·ªùi v√¨ l√† ng√†y 5/5
| 2025-05-05 | Ca 2  | NV C, NV D, NV Y         | <--- 3 ng∆∞·ªùi v√¨ l√† ng√†y 5/5
| 2025-05-06 | Ca 1  | NV E, NV F               | <--- 2 ng∆∞·ªùi v√¨ l√† ng√†y th∆∞·ªùng
| ... (cho ƒë·∫øn 2025-05-11) ... | ...   | ...                      |

**QUAN TR·ªåNG:** Ch·ªâ tr·∫£ v·ªÅ B·∫¢NG MARKDOWN l·ªãch l√†m vi·ªác, kh√¥ng th√™m b·∫•t k·ª≥ l·ªùi gi·∫£i th√≠ch hay b√¨nh lu·∫≠n n√†o kh√°c tr∆∞·ªõc ho·∫∑c sau b·∫£ng. ƒê·∫£m b·∫£o c·ªôt "Ng√†y" ch·ª©a ng√†y<y_bin_46>-MM-DD ch√≠nh x√°c cho c·∫£ tu·∫ßn. **ƒê·∫£m b·∫£o x·ª≠ l√Ω c√°c 'Ghi ch√∫' theo h∆∞·ªõng d·∫´n ƒë√£ n√™u, ƒë·∫∑c bi·ªát l√† logic ∆∞u ti√™n cho gi·ªù l√†m kh√¥ng tr·ªçn v·∫πn.** ƒê·∫£m b·∫£o m·ªçi r√†ng bu·ªôc kh√°c ƒë∆∞·ª£c ƒë√°p ·ª©ng (ƒë·∫∑c bi·ªát l√† **s·ªë ng∆∞·ªùi/ca theo t·ª´ng ng√†y**, **ƒê√öNG {requirements['shifts_per_week_target']} ca/ng∆∞·ªùi/tu·∫ßn**, v√† {requirements['max_shifts_per_day']} ca/ng∆∞·ªùi/ng√†y). N·∫øu kh√¥ng th·ªÉ t·∫°o l·ªãch ƒë√°p ·ª©ng t·∫•t c·∫£ r√†ng bu·ªôc (v√≠ d·ª•: thi·∫øu ng∆∞·ªùi cho m·ªôt ca n√†o ƒë√≥, ho·∫∑c kh√¥ng th·ªÉ ƒë·∫£m b·∫£o 4 ca/tu·∫ßn cho m·ªçi ng∆∞·ªùi), h√£y ghi r√µ ƒëi·ªÅu ƒë√≥ trong b·∫£ng ho·∫∑c n√™u l√Ω do ng·∫Øn g·ªçn ngay d∆∞·ªõi b·∫£ng.
"""
    with st.expander("Xem Prompt g·ª≠i ƒë·∫øn AI (ƒë·ªÉ tham kh·∫£o)"): st.text(full_prompt)
    try: # Call AI Model
        st.info("‚è≥ ƒêang g·ªçi AI ƒë·ªÉ t·∫°o l·ªãch..."); response = model.generate_content(full_prompt)
        st.success("‚úÖ AI ƒë√£ ph·∫£n h·ªìi."); return response.text
    except Exception as e: st.error(f"L·ªói khi g·ªçi AI: {e}"); return None


# --- Function to Parse AI Response (Keep Improved Column Handling) ---
def parse_ai_schedule(ai_response_text):
    """Attempts to parse the AI's Markdown table response into a DataFrame."""
    st.info("üîé ƒêang ph√¢n t√≠ch ph·∫£n h·ªìi t·ª´ AI...")
    with st.expander("Xem ph·∫£n h·ªìi th√¥ t·ª´ AI"): st.text(ai_response_text)
    match = re.search(r"(\|[^\n]+\|\n\|\s*[-|:]+\s*\|\n(?:\|[^\n]+\|\n?)+)", ai_response_text, re.MULTILINE)
    if not match:
         lines = [line.strip() for line in ai_response_text.strip().split('\n') if line.strip().startswith('|')]
         if len(lines) > 1: st.warning("Kh√¥ng t√¨m th·∫•y c·∫•u tr√∫c Markdown chu·∫©n, th·ª≠ ph√¢n t√≠ch d√≤ng '|'."); table_content = "\n".join(lines)
         else: st.error("Kh√¥ng t√¨m th·∫•y ƒë·ªãnh d·∫°ng b·∫£ng Markdown."); return None
    else: table_content = match.group(1)
    try:
        if table_content.startswith('|---'): table_content = "| H1 | H2 | H3 |\n" + table_content
        data_io = io.StringIO(table_content);
        df_schedule = pd.read_csv(data_io, sep='|', skipinitialspace=True, header=0)
        # Robust Cleaning
        if not df_schedule.empty and df_schedule.columns[0].strip() == '': df_schedule = df_schedule.iloc[:, 1:]
        if not df_schedule.empty and df_schedule.columns[-1].strip() == '': df_schedule = df_schedule.iloc[:, :-1]
        separator_pattern = r'--'; df_schedule = df_schedule[~df_schedule.iloc[:, 0].astype(str).str.contains(separator_pattern)]
        df_schedule = df_schedule.dropna(axis=0, how='all').dropna(axis=1, how='all')
        df_schedule.columns = [col.strip() for col in df_schedule.columns]
        for col in df_schedule.select_dtypes(include=['object']).columns: df_schedule[col] = df_schedule[col].str.strip()
        df_schedule = df_schedule.loc[:, df_schedule.columns.str.strip() != '']
        df_schedule = df_schedule.loc[:, ~df_schedule.columns.str.match('Unnamed')]
        # Assign Column Names by Position
        if len(df_schedule.columns) >= 3:
            df_schedule.columns = ["Ng√†y", "Ca", "Nh√¢n vi√™n ƒë∆∞·ª£c ph√¢n c√¥ng"] + list(df_schedule.columns[3:])
            df_schedule = df_schedule[["Ng√†y", "Ca", "Nh√¢n vi√™n ƒë∆∞·ª£c ph√¢n c√¥ng"]]
        else: st.error(f"L·ªói ph√¢n t√≠ch: B·∫£ng ch·ªâ c√≥ {len(df_schedule.columns)} c·ªôt, c·∫ßn √≠t nh·∫•t 3."); st.dataframe(df_schedule); return None
        # Date Conversion
        if "Ng√†y" in df_schedule.columns:
            try:
                df_schedule['Ng√†y'] = pd.to_datetime(df_schedule['Ng√†y'], format='%Y-%m-%d', errors='coerce')
                if df_schedule['Ng√†y'].isnull().any(): st.warning("C·∫£nh b√°o: M·ªôt s·ªë gi√° tr·ªã 'Ng√†y' t·ª´ AI kh√¥ng h·ª£p l·ªá.")
                df_schedule = df_schedule.dropna(subset=['Ng√†y'])
            except Exception as date_err: st.warning(f"L·ªói chuy·ªÉn ƒë·ªïi c·ªôt 'Ng√†y' t·ª´ AI: {date_err}")
        else: st.error("L·ªói nghi√™m tr·ªçng: Kh√¥ng t√¨m th·∫•y c·ªôt 'Ng√†y'."); return None
        if df_schedule.empty: st.warning("Kh√¥ng c√≥ d·ªØ li·ªáu h·ª£p l·ªá sau khi ph√¢n t√≠ch."); return None
        st.success("‚úÖ Ph√¢n t√≠ch l·ªãch tr√¨nh t·ª´ AI th√†nh c√¥ng."); return df_schedule
    except Exception as e: st.error(f"L·ªói nghi√™m tr·ªçng khi ph√¢n t√≠ch b·∫£ng Markdown: {e}"); return None


# --- Function to Display Formatted Schedule (Keep using Selectbox) ---
def display_editable_schedule_with_dropdowns(parsed_schedule_df, availability_df):
    """Displays the schedule using columns and selectboxes for editing."""
    st.subheader("üìÖ L·ªãch L√†m Vi·ªác Tu·∫ßn (Ch·ªânh s·ª≠a / Thay th·∫ø)")
    if parsed_schedule_df is None or parsed_schedule_df.empty: st.warning("Kh√¥ng c√≥ d·ªØ li·ªáu l·ªãch ƒë·ªÉ hi·ªÉn th·ªã."); return None
    if availability_df is None: st.warning("Thi·∫øu d·ªØ li·ªáu tra c·ª©u ng∆∞·ªùi thay th·∫ø."); return None # Need availability data

    try:
        # Ensure 'Ng√†y' is datetime
        if 'Ng√†y' in parsed_schedule_df.columns and not pd.api.types.is_datetime64_any_dtype(parsed_schedule_df['Ng√†y']):
             parsed_schedule_df['Ng√†y'] = pd.to_datetime(parsed_schedule_df['Ng√†y'], errors='coerce')
        parsed_schedule_df = parsed_schedule_df.dropna(subset=['Ng√†y', 'Ca', 'Nh√¢n vi√™n ƒë∆∞·ª£c ph√¢n c√¥ng'])
        if parsed_schedule_df.empty: st.warning("Kh√¥ng c√≤n d·ªØ li·ªáu h·ª£p l·ªá sau khi l·ªçc."); return None

        # Get unique sorted dates
        unique_dates = sorted(parsed_schedule_df['Ng√†y'].dt.date.unique())
        if not unique_dates: st.warning("Kh√¥ng c√≥ ng√†y h·ª£p l·ªá n√†o trong d·ªØ li·ªáu."); return None

        # Prepare the 8 display columns
        col_names = ['Th·ª©', 'Ng√†y', 'Ca 1 (NV1)', 'Ca 1 (NV2)', 'Ca 1 (NV3)', 'Ca 2 (NV1)', 'Ca 2 (NV2)', 'Ca 2 (NV3)']
        # --- UPDATED: Adjust column widths for compactness ---
        col_widths = [0.6, 0.9, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0] # Make first two columns narrower
        header_cols = st.columns(col_widths)
        for col, name in zip(header_cols, col_names):
             col.markdown(f"**{name}**", unsafe_allow_html=True)
        st.divider()

        # Store current selections (important for statefulness)
        if 'current_schedule_selections' not in st.session_state:
             st.session_state.current_schedule_selections = {}

        vietnamese_days = ["Th·ª© 2", "Th·ª© 3", "Th·ª© 4", "Th·ª© 5", "Th·ª© 6", "Th·ª© 7", "Ch·ªß Nh·∫≠t"]
        edited_data = [] # To store the final selections for download/later use

        for current_date in unique_dates:
            row_cols = st.columns(col_widths) # Use adjusted widths for rows too
            day_name = vietnamese_days[current_date.weekday()]
            date_str = current_date.strftime('%d/%m/%Y')
            row_cols[0].markdown(f"<div style='text-align: center; height: 100%; display: flex; align-items: center; justify-content: center;'>{day_name}</div>", unsafe_allow_html=True)
            row_cols[1].markdown(f"<div style='text-align: center; height: 100%; display: flex; align-items: center; justify-content: center;'>{date_str}</div>", unsafe_allow_html=True)

            # --- Process Ca 1 ---
            staff_ca1_str = parsed_schedule_df[(parsed_schedule_df['Ng√†y'].dt.date == current_date) & (parsed_schedule_df['Ca'] == 'Ca 1')]['Nh√¢n vi√™n ƒë∆∞·ª£c ph√¢n c√¥ng'].iloc[0] if not parsed_schedule_df[(parsed_schedule_df['Ng√†y'].dt.date == current_date) & (parsed_schedule_df['Ca'] == 'Ca 1')].empty else ""
            initial_staff_ca1 = [name.strip() for name in staff_ca1_str.split(',') if name.strip()]
            available_ca1_df = availability_df[(availability_df['Date'] == current_date) & (availability_df['Shift'] == 'Ca 1') & (availability_df['Can_Work'] == True)]
            available_ca1_list = [""] + sorted(available_ca1_df['Employee'].unique().tolist()) # Add empty option

            selected_ca1 = []
            for i in range(3): # NV1, NV2, NV3 for Ca 1
                 col_index = i + 2
                 selectbox_key = f"ca1_nv{i+1}_{date_str}"
                 initial_selection = initial_staff_ca1[i] if i < len(initial_staff_ca1) else ""
                 current_selection = st.session_state.current_schedule_selections.get(selectbox_key, initial_selection)
                 if current_selection not in available_ca1_list: current_selection = ""
                 try: selected_index = available_ca1_list.index(current_selection)
                 except ValueError: selected_index = 0
                 selected_emp = row_cols[col_index].selectbox(f"Ca 1 NV{i+1}", options=available_ca1_list, index=selected_index, key=selectbox_key, label_visibility="collapsed")
                 selected_ca1.append(selected_emp)
                 st.session_state.current_schedule_selections[selectbox_key] = selected_emp

            # --- Process Ca 2 ---
            staff_ca2_str = parsed_schedule_df[(parsed_schedule_df['Ng√†y'].dt.date == current_date) & (parsed_schedule_df['Ca'] == 'Ca 2')]['Nh√¢n vi√™n ƒë∆∞·ª£c ph√¢n c√¥ng'].iloc[0] if not parsed_schedule_df[(parsed_schedule_df['Ng√†y'].dt.date == current_date) & (parsed_schedule_df['Ca'] == 'Ca 2')].empty else ""
            initial_staff_ca2 = [name.strip() for name in staff_ca2_str.split(',') if name.strip()]
            available_ca2_df = availability_df[(availability_df['Date'] == current_date) & (availability_df['Shift'] == 'Ca 2') & (availability_df['Can_Work'] == True)]
            available_ca2_list = [""] + sorted(available_ca2_df['Employee'].unique().tolist())

            selected_ca2 = []
            for i in range(3): # NV1, NV2, NV3 for Ca 2
                 col_index = i + 5
                 selectbox_key = f"ca2_nv{i+1}_{date_str}"
                 initial_selection = initial_staff_ca2[i] if i < len(initial_staff_ca2) else ""
                 current_selection = st.session_state.current_schedule_selections.get(selectbox_key, initial_selection)
                 if current_selection not in available_ca2_list: current_selection = ""
                 try: selected_index = available_ca2_list.index(current_selection)
                 except ValueError: selected_index = 0
                 selected_emp = row_cols[col_index].selectbox(f"Ca 2 NV{i+1}", options=available_ca2_list, index=selected_index, key=selectbox_key, label_visibility="collapsed")
                 selected_ca2.append(selected_emp)
                 st.session_state.current_schedule_selections[selectbox_key] = selected_emp

            # Store the row data based on selections
            edited_row = {
                'Th·ª©': day_name, 'Ng√†y': date_str,
                'Ca 1 (NV1)': selected_ca1[0], 'Ca 1 (NV2)': selected_ca1[1], 'Ca 1 (NV3)': selected_ca1[2],
                'Ca 2 (NV1)': selected_ca2[0], 'Ca 2 (NV2)': selected_ca2[1], 'Ca 2 (NV3)': selected_ca2[2],
            }
            edited_data.append(edited_row)
            st.divider() # Add divider between rows

        # Return the DataFrame constructed from the current selections
        return pd.DataFrame(edited_data)

    except Exception as e:
        st.error(f"L·ªói khi t·∫°o/hi·ªÉn th·ªã b·∫£ng ch·ªânh s·ª≠a: {e}")
        st.write("D·ªØ li·ªáu DataFrame g·ªëc t·ª´ AI (tr∆∞·ªõc khi t·∫°o b·∫£ng):")
        st.dataframe(parsed_schedule_df) # Show the intermediate data
        return None # Return None on error


# --- Function to Create 8-Column DataFrame (Helper Function) ---
# --- ADDED BACK: This function is needed if display_editable_schedule_with_dropdowns fails or for initial state ---
def create_8_column_df(df_schedule):
    """Creates the 8-column display DataFrame from the parsed 3-column schedule."""
    if df_schedule is None or df_schedule.empty: return None
    try:
        # Ensure 'Ng√†y' is datetime
        if 'Ng√†y' in df_schedule.columns and not pd.api.types.is_datetime64_any_dtype(df_schedule['Ng√†y']):
             df_schedule['Ng√†y'] = pd.to_datetime(df_schedule['Ng√†y'], errors='coerce')
        df_schedule = df_schedule.dropna(subset=['Ng√†y', 'Ca', 'Nh√¢n vi√™n ƒë∆∞·ª£c ph√¢n c√¥ng'])
        if df_schedule.empty: return None
        unique_dates = sorted(df_schedule['Ng√†y'].dt.date.unique())
        if not unique_dates: return None

        output_rows = []
        vietnamese_days = ["Th·ª© 2", "Th·ª© 3", "Th·ª© 4", "Th·ª© 5", "Th·ª© 6", "Th·ª© 7", "Ch·ªß Nh·∫≠t"]
        for current_date in unique_dates:
            day_name = vietnamese_days[current_date.weekday()]
            date_str = current_date.strftime('%d/%m/%Y')
            staff_ca1_str = df_schedule[(df_schedule['Ng√†y'].dt.date == current_date) & (df_schedule['Ca'] == 'Ca 1')]['Nh√¢n vi√™n ƒë∆∞·ª£c ph√¢n c√¥ng'].iloc[0] if not df_schedule[(df_schedule['Ng√†y'].dt.date == current_date) & (df_schedule['Ca'] == 'Ca 1')].empty else ""
            staff_ca1_list = [name.strip() for name in staff_ca1_str.split(',') if name.strip()]
            staff_ca2_str = df_schedule[(df_schedule['Ng√†y'].dt.date == current_date) & (df_schedule['Ca'] == 'Ca 2')]['Nh√¢n vi√™n ƒë∆∞·ª£c ph√¢n c√¥ng'].iloc[0] if not df_schedule[(df_schedule['Ng√†y'].dt.date == current_date) & (df_schedule['Ca'] == 'Ca 2')].empty else ""
            staff_ca2_list = [name.strip() for name in staff_ca2_str.split(',') if name.strip()]
            row_data = {
                'Th·ª©': day_name, 'Ng√†y': date_str,
                'Ca 1 (NV1)': staff_ca1_list[0] if len(staff_ca1_list) > 0 else '', 'Ca 1 (NV2)': staff_ca1_list[1] if len(staff_ca1_list) > 1 else '', 'Ca 1 (NV3)': staff_ca1_list[2] if len(staff_ca1_list) > 2 else '',
                'Ca 2 (NV1)': staff_ca2_list[0] if len(staff_ca2_list) > 0 else '', 'Ca 2 (NV2)': staff_ca2_list[1] if len(staff_ca2_list) > 1 else '', 'Ca 2 (NV3)': staff_ca2_list[2] if len(staff_ca2_list) > 2 else '',
            }
            output_rows.append(row_data)
        df_display = pd.DataFrame(output_rows)
        column_order = ['Th·ª©', 'Ng√†y', 'Ca 1 (NV1)', 'Ca 1 (NV2)', 'Ca 1 (NV3)', 'Ca 2 (NV1)', 'Ca 2 (NV2)', 'Ca 2 (NV3)']
        df_display = df_display[column_order]
        return df_display
    except Exception as e:
        st.error(f"L·ªói khi t·∫°o b·∫£ng 8 c·ªôt (helper): {e}")
        return None


# --- REMOVED: find_replacements_ui function ---

# --- Main Application Logic (UPDATED State Management and Display Logic) ---
def main_app():
    """Main application function after login."""
    load_css()
    st.title("üìÖ AI Work Schedule Manager")
    st.caption("D√°n d·ªØ li·ªáu ƒëƒÉng k√Ω t·ª´ Excel v√† ƒë·ªÉ AI t·∫°o l·ªãch l√†m vi·ªác t·ªëi ∆∞u.")
    st.divider()
    # Initialize session state
    if 'df_from_paste' not in st.session_state: st.session_state.df_from_paste = None
    if 'schedule_df' not in st.session_state: st.session_state.schedule_df = None # Parsed 3-column AI result
    if 'edited_schedule_table' not in st.session_state: st.session_state.edited_schedule_table = None # Stores the DF from the manual table
    if 'ai_response_text' not in st.session_state: st.session_state.ai_response_text = None
    if 'availability_lookup_df' not in st.session_state: st.session_state.availability_lookup_df = None # Re-added
    if 'copyable_text' not in st.session_state: st.session_state.copyable_text = None # State for copyable text

    requirements = get_scheduling_requirements()
    if requirements is None: st.stop()
    input_container = st.container(border=True) # Use container with border
    with input_container: # Input Section
        st.subheader("üìã B∆∞·ªõc 1: D√°n D·ªØ Li·ªáu ƒêƒÉng K√Ω")
        col1, col2 = st.columns([3, 1])
        with col1: pasted_data = st.text_area("D√°n d·ªØ li·ªáu t·ª´ b·∫£ng Excel:", height=250, key="pasted_data_area", label_visibility="collapsed")
        with col2:
            st.markdown("<div style='margin-top: 30px;'></div>", unsafe_allow_html=True)
            process_button = st.button("‚öôÔ∏è X·ª≠ l√Ω d·ªØ li·ªáu", key="process_paste_button", use_container_width=True)
            st.markdown("<div style='margin-top: 10px;'></div>", unsafe_allow_html=True)
            generate_button_placeholder = st.empty()

    if process_button: # Data Processing Logic
        # Reset states
        st.session_state.df_from_paste = None; st.session_state.schedule_df = None; st.session_state.edited_schedule_table = None;
        st.session_state.ai_response_text = None; st.session_state.availability_lookup_df = None # Reset lookup table
        st.session_state.current_schedule_selections = {} # Reset selections
        st.session_state.copyable_text = None # Reset copyable text
        if pasted_data:
            try:
                # --- UPDATED: Flexible Header Reading ---
                data_io = io.StringIO(pasted_data)
                first_line = data_io.readline().lower() # Read first line for header check
                data_io.seek(0) # Reset pointer to read the whole data again
                header_keywords = ["t√™n", "th·ª©", "ghi ch√∫", "tu·∫ßn", "ng√†y"] # Keywords to detect header
                if any(keyword in first_line for keyword in header_keywords):
                    temp_df = pd.read_csv(data_io, sep='\t', header=0, skipinitialspace=True)
                    st.info("ƒê√£ ƒë·ªçc d·ªØ li·ªáu v·ªõi ti√™u ƒë·ªÅ t·ª´ ng∆∞·ªùi d√πng.")
                else:
                    temp_df = pd.read_csv(data_io, sep='\t', header=None, names=PREDEFINED_COLUMNS, skipinitialspace=True)
                    st.info("Kh√¥ng ph√°t hi·ªán ti√™u ƒë·ªÅ, ƒë√£ s·ª≠ d·ª•ng t√™n c·ªôt m·∫∑c ƒë·ªãnh.")

                temp_df.dropna(axis=0, how='all', inplace=True); temp_df.dropna(axis=1, how='all', inplace=True)
                if not temp_df.empty:
                    st.session_state.df_from_paste = temp_df; st.success("‚úÖ ƒê√£ x·ª≠ l√Ω d·ªØ li·ªáu d√°n th√†nh c√¥ng.")
                    st.session_state.availability_lookup_df = preprocess_pasted_data_for_lookup(st.session_state.df_from_paste)
                else: st.warning("‚ö†Ô∏è D·ªØ li·ªáu sau khi x·ª≠ l√Ω b·ªã r·ªóng.")
            except pd.errors.EmptyDataError: st.warning("‚ö†Ô∏è D·ªØ li·ªáu d√°n v√†o tr·ªëng.")
            except Exception as e: st.error(f"‚ùå L·ªói khi ƒë·ªçc d·ªØ li·ªáu: {e}"); st.error("M·∫πo: ƒê·∫£m b·∫£o copy ƒë√∫ng v√πng B·∫¢NG (tab-separated).")
        else: st.warning("‚ö†Ô∏è Ch∆∞a c√≥ d·ªØ li·ªáu n√†o ƒë∆∞·ª£c d√°n v√†o.")

    if st.session_state.df_from_paste is not None: # Display Processed Data & Generate Button
        with st.container(border=True):
             st.subheader("üìÑ B∆∞·ªõc 2: Ki·ªÉm Tra D·ªØ Li·ªáu G·ªëc")
             st.dataframe(st.session_state.df_from_paste, use_container_width=True)
             if not st.session_state.df_from_paste.empty:
                  if generate_button_placeholder.button("‚ú® T·∫°o L·ªãch v·ªõi AI", key="generate_ai_button", use_container_width=True):
                      with st.spinner("‚è≥ ƒêang y√™u c·∫ßu AI t·∫°o l·ªãch..."): # AI Generation Trigger
                          ai_response = generate_schedule_with_ai(st.session_state.df_from_paste, requirements, model)
                          st.session_state.ai_response_text = ai_response; st.session_state.schedule_df = None; st.session_state.edited_schedule_table = None # Reset results
                          st.session_state.current_schedule_selections = {} # Reset selections on new generation
                          st.session_state.copyable_text = None # Reset copyable text
                          if ai_response:
                              parsed_df = parse_ai_schedule(ai_response)
                              if parsed_df is not None:
                                   st.session_state.schedule_df = parsed_df # Store the 3-column parsed data
                                   # --- Generate the initial 8-column display DF ---
                                   st.session_state.edited_schedule_table = create_8_column_df(st.session_state.schedule_df) # Use helper to create
                          else: st.error("‚ùå Kh√¥ng nh·∫≠n ƒë∆∞·ª£c ph·∫£n h·ªìi t·ª´ AI.")
             else: st.info("D·ªØ li·ªáu ƒë√£ x·ª≠ l√Ω tr·ªëng, kh√¥ng th·ªÉ t·∫°o l·ªãch.")

    # --- Display Result Section (using manual table with dropdowns) ---
    if st.session_state.edited_schedule_table is not None: # Check if the 8-column DF exists
        with st.container(border=True):
             # Display the editable table and store the resulting DataFrame
             st.session_state.edited_schedule_table = display_editable_schedule_with_dropdowns(
                 st.session_state.schedule_df, # Pass the original parsed schedule for initial values
                 st.session_state.availability_lookup_df # Pass availability data
             )

        # REMOVED: Call to find_replacements_ui

        # --- ADDED: Section to generate copyable text ---
        st.divider()
        with st.container(border=True):
             st.subheader("üìù Sao Ch√©p D·ªØ Li·ªáu L·ªãch")
             copy_text_button = st.button("T·∫°o vƒÉn b·∫£n ƒë·ªÉ Copy sang Excel/Sheet", key="generate_copy_text_button", use_container_width=True)
             if copy_text_button:
                  df_to_copy = st.session_state.get('edited_schedule_table', None)
                  if df_to_copy is not None:
                       try:
                            # Convert DataFrame to tab-separated string
                            copy_string = df_to_copy.to_csv(sep='\t', index=False, header=True) # Include header
                            st.session_state.copyable_text = copy_string
                       except Exception as e:
                            st.error(f"L·ªói khi t·∫°o vƒÉn b·∫£n ƒë·ªÉ copy: {e}")
                            st.session_state.copyable_text = None
                  else:
                       st.warning("Kh√¥ng c√≥ d·ªØ li·ªáu l·ªãch ƒë√£ ch·ªânh s·ª≠a ƒë·ªÉ t·∫°o vƒÉn b·∫£n.")
                       st.session_state.copyable_text = None

             # Display the text area if copyable_text exists
             if st.session_state.copyable_text:
                  st.text_area(
                       "Copy to√†n b·ªô n·ªôi dung d∆∞·ªõi ƒë√¢y (Ctrl+A, Ctrl+C) v√† d√°n v√†o √¥ A1 c·ªßa Excel/Sheet:",
                       st.session_state.copyable_text,
                       height=200,
                       key="copy_text_output"
                  )


        # --- Download Section (Downloads the EDITED 8-column table) ---
        st.divider(); st.subheader("üì• T·∫£i Xu·ªëng L·ªãch (8 C·ªôt - ƒê√£ Ch·ªânh S·ª≠a)")
        col_dl1, col_dl2 = st.columns(2)

        df_to_download_final = st.session_state.get('edited_schedule_table', None) # Get the DF from the manual table

        if df_to_download_final is not None:
            try: # 8-Col CSV
                csv_8col = df_to_download_final.to_csv(index=False, encoding='utf-8-sig')
                col_dl1.download_button("T·∫£i CSV (ƒê√£ s·ª≠a)", csv_8col, "edited_schedule_8col.csv", "text/csv", use_container_width=True, key="dl_csv_8col_edit")
            except Exception as e: col_dl1.error(f"L·ªói CSV 8 c·ªôt: {e}")
            try: # 8-Col Excel
                buffer_excel_8col = io.BytesIO()
                engine = 'xlsxwriter' if 'xlsxwriter' in sys.modules else 'openpyxl'
                with pd.ExcelWriter(buffer_excel_8col, engine=engine) as writer:
                    df_to_download_final.to_excel(writer, index=False, sheet_name='Edited_Schedule_8Col')
                col_dl2.download_button("T·∫£i Excel (ƒê√£ s·ª≠a)", buffer_excel_8col.getvalue(), "edited_schedule_8col.xlsx", "application/vnd.ms-excel", use_container_width=True, key="dl_excel_8col_edit")
            except Exception as e: col_dl2.error(f"L·ªói Excel 8 c·ªôt: {e}")
        else:
            col_dl1.warning("Kh√¥ng c√≥ d·ªØ li·ªáu l·ªãch ƒë√£ s·ª≠a ƒë·ªÉ t·∫£i.")
            col_dl2.warning("Kh√¥ng c√≥ d·ªØ li·ªáu l·ªãch ƒë√£ s·ª≠a ƒë·ªÉ t·∫£i.")


    # --- UPDATED: Use user-provided copyright in Sidebar ---
    st.sidebar.divider() # Add a divider before copyright
    st.sidebar.markdown("<p class='footer-copyright'>Copyright ¬©LeQuyPhat</p>", unsafe_allow_html=True)

# --- Entry Point ---
def main():
    """Main function to handle login state."""
    if 'logged_in' not in st.session_state: st.session_state.logged_in = False
    load_css() # Load CSS needs to happen outside login check if login UI uses it
    if not st.session_state.logged_in: login()
    else: main_app()

if __name__ == "__main__":
    main()
